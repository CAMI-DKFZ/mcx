name: Build and Upload Windows Python Wheels
on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
    branches:
      - master


jobs:
  build_windows_wheels:
    name: Build Windows wheels
    runs-on: windows-latest
    strategy:
      matrix:
        python_version: [ '3.6', '3.7', '3.8', '3.9', '3.10', '3.11', 'pypy3.7', 'pypy3.8', 'pypy3.9']
    outputs:
      upload_to_pypi: ${{ steps.perform_pypi_upload_check.outputs.perform_pypi_upload }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
      - name: Install CUDA
        run: |
          choco install -y cuda --version=11.8.0.52206
          $CUDA_PATH=Get-ChildItem "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA" -filter "v*.*" -Directory | % { $_.fullname }
          echo "CUDA_PATH=$CUDA_PATH" >> $env:GITHUB_ENV
          echo "CUDA_TOOLKIT_ROOT_DIR=$CUDA_PATH" >> $env:GITHUB_ENV
      - name: Install Zlib Dev
        run: |
          curl.exe --retry 3 -kL https://cytranet.dl.sourceforge.net/project/gnuwin32/zlib/1.2.3/zlib-1.2.3-lib.zip --output zlib.zip
          Expand-Archive .\zlib.zip -DestinationPath zlib\
          echo "CMAKE_INCLUDE_PATH=$PWD\zlib\include" >> $env:GITHUB_ENV
          echo "CMAKE_LIBRARY_PATH=$PWD\zlib\lib" >> $env:GITHUB_ENV
          rm zlib.zip

      - name: Build Wheels
        run: |
          cd src/
          pip install wheel
          python setup.py bdist_wheel
      - name: Check If Wheels Need to be Uploaded to PyPI
        id: perform_pypi_upload_check
        shell: bash
        run: |
          PMCX_BUILD_VERSION=awk -F"-" '{ print $2 }' <<< $(ls dist/ | head -1)
          PMCX_VERSIONS_STRING=$(pip index versions pmcx | grep versions:)
          PMCX_VERSIONS_STRING=${PMCX_VERSIONS_STRING#*:}
          UPLOAD_TO_PYPI=0
          while IFS=', ' read -ra PMCX_VERSIONS_ARRAY; do 
            for VERSION in "${PMCX_VERSIONS_ARRAY[@]}"; do
              if [ "$PMCX_BUILD_VERSION" = "VERSION" ]; then
                UPLOAD_TO_PYPI=1
              fi
            done; 
          done <<< "PMCX_VERSIONS_STRING"
          echo "perform_pypi_upload=$UPLOAD_TO_PYPI" >> $GITHUB_OUTPUT

      - name: Prepare Wheels for Upload
        uses: actions/upload-artifact@v3
        if: {{ steps.perform_pypi_upload_check.outputs.perform_pypi_upload }} == 1
        with:
          name: windows-wheels
          path: ${GITHUB_WORKSPACE}/src/dist/

  upload_windows_wheels:
    needs: build_windows_wheels
    runs-on: ubuntu-latest
    if: github.repository_owner == 'fangq' && ${{ needs.build_windows_wheels.outputs.perform_pypi_upload }} == 1
    steps:
      - name: Download Wheels from Build Job
        uses: actions/download-artifact@v3
        with:
          name: windows-wheels
          path: dist/
      - name: Upload packages to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
