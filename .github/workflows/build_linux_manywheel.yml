name: Python Wheels
on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
    branches:
      - master


jobs:
  build_linux_wheels:
    name: Build manylinux2014 Wheels
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Build Wheel Builder Container
        shell: bash
        run: |
          set -x
          cd Docker/PyPI
          docker build --tag mcx-wheel-builder --force-rm .
      - name: Build Manylinux2014 Wheels
        shell: bash
        run: |
          docker run -v ${GITHUB_WORKSPACE}/src/:/src/ mcx-wheel-builder

  build_windows_wheels:
    name: Build Windows wheels
    runs-on: windows-latest
    strategy:
      matrix:
        python_version: [ '3.6', '3.7', '3.8', '3.9', '3.10', '3.11' ]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
#      - name: Install Dependencies
#        uses: crazy-max/ghaction-chocolatey@v2
#        with:
#          args: install -y cuda cmake
      - name: Install VS 2022 Build Tools
        uses: crazy-max/ghaction-chocolatey@v2
        with:
          args: install -y visualstudio2022buildtools --package-parameters "--nocache --norestart --wait --add Microsoft.VisualStudio.Component.Roslyn.Compiler
                --add Microsoft.Component.MSBuild
                --add Microsoft.VisualStudio.Component.CoreBuildTools
                --add Microsoft.VisualStudio.Workload.MSBuildTools
                --add Microsoft.VisualStudio.Component.Windows10SDK
                --add Microsoft.VisualStudio.Component.VC.CoreBuildTools
                --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64
                --add Microsoft.VisualStudio.Component.VC.Redist.14.Latest
                --add Microsoft.VisualStudio.Component.VC.CMake.Project
                --add Microsoft.VisualStudio.Component.TextTemplating
                --add Microsoft.VisualStudio.Component.VC.CoreIde
                --add Microsoft.VisualStudio.ComponentGroup.NativeDesktop.Core
                --add Microsoft.VisualStudio.Workload.VCTools"
      - name: Set Environment Variables
        run: |
          $VS_INSTALL_PATH = & 'C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe' -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
          $C_VERSION = cat "$VS_INSTALL_PATH\VC\Auxiliary\Build\Microsoft.VCToolsVersion.default.txt"
          set CC $VS_INSTALL_PATH\VC\Tools\MSVC\$C_VERSION\bin\Hostx64\x64\cl.exe
          $env:Path += ";C:\Program Files\CMake\bin\"
      - name: Install Zlib Dev
        run: |
          curl.exe --retry 3 -kL https://cytranet.dl.sourceforge.net/project/gnuwin32/zlib/1.2.3/zlib-1.2.3-lib.zip --output zlib.zip
          Expand-Archive .\zlib.zip -DestinationPath zlib\
          rm zlib.zip

      - name: Build Windows Wheels
        run: |
          $ENV:CMAKE_INCLUDE_PATH = "$PWD\zlib\include"
          $ENV:CMAKE_LIBRARY_PATH = "$PWD\zlib\lib"
          $ENV:ZLIB_LIBRARY = "$PWD\zlib\lib"
          cd src/
          pip install wheel
          python setup.py bdist_wheel
          
  

#  upload_pypi:
#    needs: build_linux_wheels, build_windows_wheels
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/download-artifact@v3
#        with:
#          name: artifact
#          path: dist
#
#      - uses: pypa/gh-action-pypi-publish@release/v1
#        with:
#          user: __token__
#          password: ${{ secrets.mcx_pypi_secret }}
